buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies { 
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'

ext.buildnumber = 0
if (System.getenv('BUILD_NUMBER') != null)
    project.buildnumber = System.getenv('BUILD_NUMBER')
else
    logger.lifecycle "No build number detected, setting to 0"

group = "info.loenwind.autosave"
archivesBaseName = "AutoSave"
version = "${minecraft_version}-${mod_version}.${buildnumber}"

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

boolean dev = System.getenv("RELEASE") == null || System.getenv("RELEASE").equalsIgnoreCase("false")

def type = 'alpha'
if (project.hasProperty('mod_appendix')) {
    version += "-${project.mod_appendix}"
    type = project.mod_appendix
}

minecraft {
    mappings channel: 'snapshot', version: "${mappings_version}"
    //accessTransformer = file('my_at.cfg')

    // default run configurations.
    // these can be tweaked, removed, or duplicated as needed.
	runs {}
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', minecraft_version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META_INF/mods.toml'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion': minecraft_version
    }

    // copy everything else except the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META_INF/mods.toml'
    }
}

jar {
    manifest {
        attributes(["Specification-Title": "autosave",
                    "Specification-Vendor": "tterrag",
                    "Specification-Version": "28.0",
                    "Implementation-Title": project.name,
                    "Implementation-Version": "${project.version}",
                    "Implementation-Vendor" :"tterrag",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
					"Maven-Artifact":"${project.group}:${project.archivesBaseName}:${project.version}"],)
    }
}

repositories {
	jcenter()
}

dependencies {
    minecraft 'net.minecraftforge:forge:' + minecraft_version + '-' + forge_version
    testImplementation     "org.junit.jupiter:junit-jupiter-api:5.2.0"
    testRuntime         "org.junit.jupiter:junit-jupiter-engine:5.2.0"
}

configurations {
    compile.extendsFrom exportedCompile
}

test {
    useJUnitPlatform()
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
		afterSuite { desc, result ->
			if (!desc.parent) {
				println "\nTest result: ${result.resultType}"
				println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
			}
		}
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

build.dependsOn javadoc

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        if (project.hasProperty('maven2_url')) {
            if (project.hasProperty('maven2_user') && project.hasProperty('maven2_pass')) {
                maven {
                    url maven2_url
                    credentials {
                        username maven2_user
                        password maven2_pass
                    }
                }
            } else {
                maven { url maven2_url }
            }
        } else {
            mavenLocal()
        }
    }
}

String getChangelogText() {
    def changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it
            if (lineCount == 0) {
                temp = "${archivesBaseName} ${version}"
                temp = "<h2>$temp</h2>"
            } else if (it.startsWith('-')) {
                temp = "&nbsp;&nbsp;&nbsp;$temp"
            } else {
                temp = "<h4>$temp</h4>"
            }
            str += "$temp<br/>"
            lineCount++
            return
        } else {
            done = true
        }
    }
    return str
}